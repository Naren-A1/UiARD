<Activity mc:Ignorable="sap sap2010" x:Class="Invoke_Code" VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="1240,13094" sap2010:WorkflowViewState.IdRef="Invoke_Code_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>System.Runtime</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Invoke Code  activity allows you to call vb.net code directly from UiPath. " DisplayName="Invoke_Code" sap:VirtualizedContainerService.HintSize="672,13029" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Default="Hello World" Name="ExampleInValue" />
      <Variable x:TypeArguments="x:Int32" Name="OutValue" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="610,596" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,517" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence DisplayName="Sequence 1" sap:VirtualizedContainerService.HintSize="450,406" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="'You can specify what code you wish to execute here'&#xA;'Here we simply write a string to the screen'&#xA;&#xA;Dim MyName As String&#xA;MyName = &quot;Naren Bagavathy&quot;&#xA;Console.WriteLine(MyName)&#xA;&#xA;Console.WriteLine(ExampleInArgument)&#xA;&#xA;ExampleOutArgument = 007&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="388,165" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
              <ui:InvokeCode.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="ExampleInArgument">[ExampleInValue]</InArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="ExampleOutArgument">[OutValue]</OutArgument>
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
            <WriteLine DisplayName="Write OutputValue" sap:VirtualizedContainerService.HintSize="388,90" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[OutValue.ToString]" />
          </Sequence>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="610,921" sap2010:WorkflowViewState.IdRef="CommentOut_2">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="534,842" sap2010:WorkflowViewState.IdRef="Sequence_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence DisplayName="Sequence 2 - Customer IDs List Processing" sap:VirtualizedContainerService.HintSize="472,731" sap2010:WorkflowViewState.IdRef="Sequence_8">
            <Sequence.Variables>
              <Variable x:TypeArguments="scg:List(x:String)" Default="[New  List(Of String) from {&quot;1001&quot;,&quot;1002&quot;}]" Name="listCustomerId" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="io_ListCustomerId.Add(&quot;1003&quot;)&#xA;io_ListCustomerId.Reverse(1,2)" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="410,165" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
              <ui:InvokeCode.Arguments>
                <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="io_ListCustomerId">[listCustomerId]</InOutArgument>
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
            <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="410,415" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[listCustomerId]">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="currentItem" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="376,229" sap2010:WorkflowViewState.IdRef="Sequence_6">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,141" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[currentItem]" />
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
            </ui:ForEach>
          </Sequence>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <Sequence sap2010:Annotation.AnnotationText="Add(), AddRange(), Insert(), InsertRange()&#xD;&#xA;.LastIndexOf(), RemoveRange(), Reverse(), Sort(), and ToArray() methods.&#xD;&#xA;" DisplayName="List Methods - Vb.Net Code" sap:VirtualizedContainerService.HintSize="610,3418" sap2010:WorkflowViewState.IdRef="Sequence_10">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="548,397" sap2010:WorkflowViewState.IdRef="CommentOut_4">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,318" sap2010:WorkflowViewState.IdRef="Sequence_12">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="&#xD;&#xA;Adds an object to the end of the List&lt;T&gt;." Code="Dim DinosaursList As New List(Of String)&#xD;&#xA;&#xD;&#xA;DinosaursList.Add(&quot;Velociraptor&quot;)&#xD;&#xA;DinosaursList.Add(&quot;Stegosaurus&quot;)&#xD;&#xA;DinosaursList.Add(&quot;Brachiosaurus&quot;)&#xD;&#xA;DinosaursList.Add(&quot;Tyrannosaurus&quot;)&#xD;&#xA;&#xD;&#xA;For Each Dinosaurs As String In DinosaursList&#xD;&#xA;Console.WriteLine(Dinosaurs)&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#xD;&#xA;" DisplayName="Invoke Code - Add()" sap:VirtualizedContainerService.HintSize="388,207" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="548,1754" sap2010:WorkflowViewState.IdRef="CommentOut_10">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,1675" sap2010:WorkflowViewState.IdRef="Sequence_23">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Sequence sap2010:Annotation.AnnotationText="AddRange()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Adds the elements of the specified collection to the end of the List&lt;T&gt;.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;InsertRange()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Inserts the elements of a collection into the List&lt;T&gt; at the specified index.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;RemoveRange()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Removes a range of elements from the List&lt;T&gt;.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; ToArray()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Copies the elements of the List&lt;T&gt; to a new array.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; Insert()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Inserts an element into the List&lt;T&gt; at the specified index.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; LastIndexOf()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Returns the zero-based index of the last occurrence of a value in the List&lt;T&gt; or in a portion of it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" sap:VirtualizedContainerService.HintSize="450,1564" sap2010:WorkflowViewState.IdRef="Sequence_22">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="" Code="string[] input = { &quot;Brachiosaurus&quot;,&quot;Amargasaurus&quot;,&quot;Mamenchisaurus&quot; };&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nCapacity: {0}&quot;, dinosaurs.Capacity);&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in dinosaurs) {&#xD;&#xA;  Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nAddRange(dinosaurs)&quot;);&#xD;&#xA;dinosaurs.AddRange(dinosaurs);&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in dinosaurs) {&#xD;&#xA;  Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nRemoveRange(2, 2)&quot;);&#xD;&#xA;dinosaurs.RemoveRange(2, 2);&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in dinosaurs) {&#xD;&#xA;  Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;input = new string[] {&#xD;&#xA;  &quot;Tyrannosaurus&quot;,&#xD;&#xA;  &quot;Deinonychus&quot;,&#xD;&#xA;  &quot;Velociraptor&quot;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nInsertRange(3, input)&quot;);&#xD;&#xA;dinosaurs.InsertRange(3, input);&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in dinosaurs) {&#xD;&#xA;  Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\noutput = dinosaurs.GetRange(2, 3).ToArray()&quot;);&#xD;&#xA;string[] output = dinosaurs.GetRange(2, 3).ToArray();&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in output) {&#xD;&#xA;  Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nInsert(3, NewDinosaurName)&quot;);&#xD;&#xA;string NewDinosaurName = &quot;Godzilla&quot;;&#xD;&#xA;dinosaurs.Insert(0,NewDinosaurName);&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in dinosaurs) {&#xD;&#xA;  Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;Console.WriteLine(&quot;LastIndexOf(NewDinosaurName)&quot;);&#xD;&#xA;Console.WriteLine(dinosaurs.LastIndexOf(NewDinosaurName));&#xD;&#xA;&#xD;&#xA;   List&lt;string&gt; dinosaurs1 = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;        dinosaurs1.Add(&quot;Tyrannosaurus&quot;);&#xD;&#xA;        dinosaurs1.Add(&quot;Amargasaurus&quot;);&#xD;&#xA;        dinosaurs1.Add(&quot;Mamenchisaurus&quot;);&#xD;&#xA;        dinosaurs1.Add(&quot;Brachiosaurus&quot;);&#xD;&#xA;        dinosaurs1.Add(&quot;Deinonychus&quot;);&#xD;&#xA;        dinosaurs1.Add(&quot;Tyrannosaurus&quot;);&#xD;&#xA;        dinosaurs1.Add(&quot;Compsognathus&quot;);&#xD;&#xA;&#xD;&#xA;        Console.WriteLine();&#xD;&#xA;        foreach(string dinosaur in dinosaurs1)&#xD;&#xA;        {&#xD;&#xA;            Console.WriteLine(dinosaur);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        Console.WriteLine(&quot;\nLastIndexOf(\&quot;Tyrannosaurus\&quot;): {0}&quot;,&#xD;&#xA;            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;));&#xD;&#xA;&#xD;&#xA;        Console.WriteLine(&quot;\nLastIndexOf(\&quot;Tyrannosaurus\&quot;, 3): {0}&quot;,&#xD;&#xA;            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3));&#xD;&#xA;&#xD;&#xA;        Console.WriteLine(&quot;\nLastIndexOf(\&quot;Tyrannosaurus\&quot;, 4, 4): {0}&quot;,&#xD;&#xA;            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/* This code example produces the following output:&#xD;&#xA;&#xD;&#xA;Capacity: 3&#xD;&#xA;&#xD;&#xA;Brachiosaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Mamenchisaurus&#xD;&#xA;&#xD;&#xA;AddRange(dinosaurs)&#xD;&#xA;&#xD;&#xA;Brachiosaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Mamenchisaurus&#xD;&#xA;Brachiosaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Mamenchisaurus&#xD;&#xA;&#xD;&#xA;RemoveRange(2, 2)&#xD;&#xA;&#xD;&#xA;Brachiosaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Mamenchisaurus&#xD;&#xA;&#xD;&#xA;InsertRange(3, input)&#xD;&#xA;&#xD;&#xA;Brachiosaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Tyrannosaurus&#xD;&#xA;Deinonychus&#xD;&#xA;Velociraptor&#xD;&#xA;Mamenchisaurus&#xD;&#xA;&#xD;&#xA;output = dinosaurs.GetRange(2, 3).ToArray()&#xD;&#xA;&#xD;&#xA;Amargasaurus&#xD;&#xA;Tyrannosaurus&#xD;&#xA;Deinonychus&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Godzilla&#xD;&#xA;Brachiosaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Amargasaurus&#xD;&#xA;Tyrannosaurus&#xD;&#xA;Deinonychus&#xD;&#xA;Velociraptor&#xD;&#xA;Mamenchisaurus&#xD;&#xA;&#xD;&#xA; */" DisplayName="Invoke C# Code -" sap:VirtualizedContainerService.HintSize="388,196" sap2010:WorkflowViewState.IdRef="InvokeCode_6" Language="CSharp">
                <ui:InvokeCode.Arguments>
                  <scg:Dictionary x:TypeArguments="x:String, Argument" />
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
            </Sequence>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="548,1019" sap2010:WorkflowViewState.IdRef="CommentOut_8">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,940" sap2010:WorkflowViewState.IdRef="Sequence_19">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Sequence sap2010:Annotation.AnnotationText="TrimExcess()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Sets the capacity to the actual number of elements in the List&lt;T&gt;, if that number is less than a threshold value.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Keep in mind that the capacity is not the same as the count, which represents the actual number of elements currently in the list. Capacity is related to the underlying data structure's allocated memory, while count is about how many items are actually in the list.&#xD;&#xA;&#xD;&#xA;In the context of a List&lt;T&gt; in C#, &quot;capacity&quot; refers to the number of elements that the list can currently hold without needing to allocate more memory. It's an internal implementation detail of how lists are managed to improve performance.&#xD;&#xA;&#xD;&#xA;When you create a List&lt;T&gt;, it starts with a default capacity, which is typically 4 elements. As you add elements to the list, it automatically allocates more memory if needed to accommodate the new elements. This reallocation process can be somewhat expensive in terms of time, so the list might allocate more space than necessary to avoid frequent reallocations.&#xD;&#xA;&#xD;&#xA;In your specific code, the list starts with a capacity of 0&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; dinosaurs = new List&lt;string&gt;();&#xD;&#xA;" sap:VirtualizedContainerService.HintSize="450,829" sap2010:WorkflowViewState.IdRef="Sequence_15">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="TrimExcess() method." Code="List&lt;String&gt;  dinosaurs = new List&lt;String&gt;();&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nCapacity: {0}&quot;, dinosaurs.Capacity);&#xD;&#xA;&#xD;&#xA;dinosaurs.Add(&quot;Tyrannosaurus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;Amargasaurus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;Mamenchisaurus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;Deinonychus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;Compsognathus&quot;);&#xD;&#xA;Console.WriteLine();&#xD;&#xA;foreach(string dinosaur in dinosaurs)&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nCapacity: {0}&quot;, dinosaurs.Capacity);&#xD;&#xA;&#xD;&#xA;dinosaurs.Add(&quot;Helicopter&quot;);&#xD;&#xA;Console.WriteLine();&#xD;&#xA;&#xD;&#xA;foreach(string dinosaur in dinosaurs)&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(dinosaur);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;dinosaurs.TrimExcess();&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nCapacity: {0}&quot;, dinosaurs.Capacity);&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;&#xD;&#xA;foreach(string dinosaur in dinosaurs)&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(dinosaur);&#xD;&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="388,196" sap2010:WorkflowViewState.IdRef="InvokeCode_7" Language="CSharp">
                <ui:InvokeCode.Arguments>
                  <scg:Dictionary x:TypeArguments="x:String, Argument" />
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
            </Sequence>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
    </Sequence>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="610,1049" sap2010:WorkflowViewState.IdRef="CommentOut_9">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,970" sap2010:WorkflowViewState.IdRef="Sequence_21">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap2010:Annotation.AnnotationText=" Sort(), &#xD;&#xA;&#xD;&#xA;Sort()&#xD;&#xA;&#xD;&#xA;/* This code example produces the following output:&#xD;&#xA;&#xD;&#xA;&quot;Pachycephalosaurus&quot;&#xD;&#xA;&quot;Amargasaurus&quot;&#xD;&#xA;&quot;&quot;&#xD;&#xA;(null)&#xD;&#xA;&quot;Mamenchisaurus&quot;&#xD;&#xA;&quot;Deinonychus&quot;&#xD;&#xA;&#xD;&#xA;Sort with generic Comparison&lt;string&gt; delegate:&#xD;&#xA;&#xD;&#xA;(null)&#xD;&#xA;&quot;&quot;&#xD;&#xA;&quot;Deinonychus&quot;&#xD;&#xA;&quot;Amargasaurus&quot;&#xD;&#xA;&quot;Mamenchisaurus&quot;&#xD;&#xA;&quot;Pachycephalosaurus&quot;&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Sorts the elements or a portion of the elements in the List&lt;T&gt; using either the specified or default IComparer&lt;T&gt; implementation or a provided Comparison&lt;T&gt; delegate to compare list elements." sap:VirtualizedContainerService.HintSize="450,859" sap2010:WorkflowViewState.IdRef="Sequence_20">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="" Code="int CompareDinosByLength(string x, string y)&#xD;&#xA;    {&#xD;&#xA;        if (x == null)&#xD;&#xA;        {&#xD;&#xA;            if (y == null)&#xD;&#xA;            {&#xD;&#xA;                // If x is null and y is null, they're&#xD;&#xA;                // equal.&#xD;&#xA;                return 0;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                // If x is null and y is not null, y&#xD;&#xA;                // is greater.&#xD;&#xA;                return -1;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            // If x is not null...&#xD;&#xA;            //&#xD;&#xA;            if (y == null)&#xD;&#xA;                // ...and y is null, x is greater.&#xD;&#xA;            {&#xD;&#xA;                return 1;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                // ...and y is not null, compare the&#xD;&#xA;                // lengths of the two strings.&#xD;&#xA;                //&#xD;&#xA;                int retval = x.Length.CompareTo(y.Length);&#xD;&#xA;&#xD;&#xA;                if (retval != 0)&#xD;&#xA;                {&#xD;&#xA;                    // If the strings are not of equal length,&#xD;&#xA;                    // the longer string is greater.&#xD;&#xA;                    //&#xD;&#xA;                    return retval;&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    // If the strings are of equal length,&#xD;&#xA;                    // sort them with ordinary string comparison.&#xD;&#xA;                    //&#xD;&#xA;                    return x.CompareTo(y);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;List&lt;string&gt; dinosaurs = new List&lt;string&gt;();&#xD;&#xA;dinosaurs.Add(&quot;Pachycephalosaurus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;Amargasaurus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;&quot;);&#xD;&#xA;dinosaurs.Add(null);&#xD;&#xA;dinosaurs.Add(&quot;Mamenchisaurus&quot;);&#xD;&#xA;dinosaurs.Add(&quot;Deinonychus&quot;);&#xD;&#xA;Console.WriteLine(dinosaurs);&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;\nSort with generic Comparison&lt;string&gt; delegate:&quot;);&#xD;&#xA;dinosaurs.Sort(CompareDinosByLength);&#xD;&#xA;Console.WriteLine(dinosaurs);&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/* This code example produces the following output:&#xD;&#xA;&#xD;&#xA;&quot;Pachycephalosaurus&quot;&#xD;&#xA;&quot;Amargasaurus&quot;&#xD;&#xA;&quot;&quot;&#xD;&#xA;(null)&#xD;&#xA;&quot;Mamenchisaurus&quot;&#xD;&#xA;&quot;Deinonychus&quot;&#xD;&#xA;&#xD;&#xA;Sort with generic Comparison&lt;string&gt; delegate:&#xD;&#xA;&#xD;&#xA;(null)&#xD;&#xA;&quot;&quot;&#xD;&#xA;&quot;Deinonychus&quot;&#xD;&#xA;&quot;Amargasaurus&quot;&#xD;&#xA;&quot;Mamenchisaurus&quot;&#xD;&#xA;&quot;Pachycephalosaurus&quot;&#xD;&#xA; */" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="388,196" sap2010:WorkflowViewState.IdRef="InvokeCode_8" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <Sequence DisplayName="Sequence String Methods" sap:VirtualizedContainerService.HintSize="610,4208" sap2010:WorkflowViewState.IdRef="Sequence_28">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,622" sap2010:WorkflowViewState.IdRef="CommentOut_13">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,543" sap2010:WorkflowViewState.IdRef="Sequence_27">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="// The example displays the following output:&#xD;&#xA;//       Sorted alphabetically by last name:&#xD;&#xA;//       John Doe&#xD;&#xA;//       Jack Smith&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Runtime.dll&#xD;&#xA;&#xD;&#xA;Compares two specified String objects and returns an integer that indicates their relative position in the sort order." Code="string name1 = &quot;Jack Smith&quot;;&#xD;&#xA;string name2 = &quot;John Doe&quot;;&#xD;&#xA;&#xD;&#xA;// Get position of character after the space character.&#xD;&#xA;int index1 = name1.IndexOf(&quot; &quot;);&#xD;&#xA;index1 = index1 &lt; 0 ? 0 : ++index1;&#xD;&#xA;&#xD;&#xA;int index2 = name2.IndexOf(&quot; &quot;);&#xD;&#xA;index2 = index2 &lt; 0 ? 0 : ++index2;&#xD;&#xA;&#xD;&#xA;int length = Math.Max(name1.Length, name2.Length);&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;Sorted alphabetically by last name:&quot;);&#xD;&#xA;if (String.Compare(name1, index1, name2, index2, length,&#xD;&#xA;                   new CultureInfo(&quot;en-US&quot;), CompareOptions.IgnoreCase) &lt; 0)&#xD;&#xA;    Console.WriteLine(&quot;{0}\n{1}&quot;, name1, name2);&#xD;&#xA;else&#xD;&#xA;    Console.WriteLine(&quot;{0}\n{1}&quot;, name2, name1);&#xD;&#xA;&#xD;&#xA;// The example displays the following output:&#xD;&#xA;//       Sorted alphabetically by last name:&#xD;&#xA;//       John Doe&#xD;&#xA;//       Jack Smith" DisplayName="Invoke Code - String.Compare" sap:VirtualizedContainerService.HintSize="388,432" sap2010:WorkflowViewState.IdRef="InvokeCode_12" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,667" sap2010:WorkflowViewState.IdRef="CommentOut_14">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,588" sap2010:WorkflowViewState.IdRef="Sequence_29">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="/*&#xD;&#xA;This example produces the following results:&#xD;&#xA;&#xD;&#xA;Compare the numeric values of the corresponding Char objects in each string.&#xD;&#xA;str1 = 'ABCD', str2 = 'abcd'&#xD;&#xA;String 'ABCD' is less than String 'abcd'.&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Runtime.dll&#xD;&#xA;&#xD;&#xA;Compares two String objects by evaluating the numeric values of the corresponding Char objects in each string." Code="   String str1 = &quot;ABCD&quot;;&#xD;&#xA;    String str2 = &quot;abcd&quot;;&#xD;&#xA;    String str;&#xD;&#xA;    int result;&#xD;&#xA;&#xD;&#xA;    Console.WriteLine();&#xD;&#xA;    Console.WriteLine(&quot;Compare the numeric values of the corresponding Char objects in each string.&quot;);&#xD;&#xA;    Console.WriteLine(&quot;str1 = '{0}', str2 = '{1}'&quot;, str1, str2);&#xD;&#xA;    result = String.CompareOrdinal(str1, str2);&#xD;&#xA;    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));&#xD;&#xA;    Console.WriteLine(&quot;String '{0}' is &quot;, str1);&#xD;&#xA;    Console.WriteLine(&quot;{0} &quot;, str);&#xD;&#xA;    Console.WriteLine(&quot;String '{0}'.&quot;, str2);" DisplayName="Invoke Code - CompareOrdinal" sap:VirtualizedContainerService.HintSize="388,477" sap2010:WorkflowViewState.IdRef="InvokeCode_13" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,607" sap2010:WorkflowViewState.IdRef="CommentOut_15">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,528" sap2010:WorkflowViewState.IdRef="Sequence_30">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="// The example displays the following output:&#xD;&#xA;//       Comparison of 'ani-mal' and 'animal': 0&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Runtime.dll&#xD;&#xA;&#xD;&#xA;Compares this instance with a specified object or String and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or String." Code="String s1 = &quot;ani\u00ADmal&quot;;&#xD;&#xA;String s2 = &quot;animal&quot;;&#xD;&#xA;      &#xD;&#xA;Console.WriteLine(&quot;Comparison of '{0}' and '{1}': {2}&quot;, &#xD;&#xA;                        s1, s2, s1.CompareTo(s2));" DisplayName="Invoke Code - String.CompareTo" sap:VirtualizedContainerService.HintSize="388,417" sap2010:WorkflowViewState.IdRef="InvokeCode_14" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,637" sap2010:WorkflowViewState.IdRef="CommentOut_16">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,558" sap2010:WorkflowViewState.IdRef="Sequence_31">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Contains()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Runtime.dll&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Returns a value indicating whether a specified character occurs within this string.&#xD;&#xA;&#xD;&#xA;// This example displays the following output:&#xD;&#xA;//    'fox' is in the string 'The quick brown fox jumps over the lazy dog': True&#xD;&#xA;//    'fox begins at character position 17" Code="string s1 = &quot;The quick brown fox jumps over the lazy dog&quot;;&#xD;&#xA;string s2 = &quot;fox&quot;;&#xD;&#xA;bool b = s1.Contains(s2);&#xD;&#xA;Console.WriteLine(&quot;'{0}' is in the string '{1}': {2}&quot;,&#xD;&#xA;                s2, s1, b);&#xD;&#xA;if (b) {&#xD;&#xA;    int index = s1.IndexOf(s2);&#xD;&#xA;    if (index &gt;= 0)&#xD;&#xA;        Console.WriteLine(&quot;'{0} begins at character position {1}&quot;,&#xD;&#xA;                      s2, index + 1);&#xD;&#xA;}&#xD;&#xA;// This example displays the following output:&#xD;&#xA;//    'fox' is in the string 'The quick brown fox jumps over the lazy dog': True&#xD;&#xA;//    'fox begins at character position 17" DisplayName="Invoke Code - Contains()" sap:VirtualizedContainerService.HintSize="388,447" sap2010:WorkflowViewState.IdRef="InvokeCode_15" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,622" sap2010:WorkflowViewState.IdRef="CommentOut_17">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,543" sap2010:WorkflowViewState.IdRef="Sequence_32">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="CopyTo()&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Runtime.dll&#xD;&#xA;&#xD;&#xA;Copies the contents of this string into the destination span.&#xD;&#xA;&#xD;&#xA;// The example displays the following output:&#xD;&#xA;//       The initial array&#xD;&#xA;//       The changed array&#xD;&#xA;//       Thedifferentarray" Code="string strSource = &quot;changed&quot;;&#xD;&#xA;char [] destination = { 'T', 'h', 'e', ' ', 'i', 'n', 'i', 't', 'i', 'a', 'l', ' ', 'a', 'r', 'r', 'a', 'y' };&#xD;&#xA;Console.WriteLine(destination);&#xD;&#xA;strSource.CopyTo(0, destination, 4, strSource.Length);&#xD;&#xA;Console.WriteLine(destination);&#xD;&#xA;strSource = &quot;A different string&quot;;&#xD;&#xA;strSource.CopyTo(2, destination, 3, 9);&#xD;&#xA;Console.WriteLine(destination);&#xD;&#xA;&#xD;&#xA;" DisplayName="Invoke Code - CopyTo()" sap:VirtualizedContainerService.HintSize="388,432" sap2010:WorkflowViewState.IdRef="InvokeCode_16" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,742" sap2010:WorkflowViewState.IdRef="CommentOut_18">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,663" sap2010:WorkflowViewState.IdRef="Sequence_33">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="// The example displays the following output:&#xD;&#xA;//    Concatenate 1, 2, and 3 objects:&#xD;&#xA;//    1) -123&#xD;&#xA;//    2) -123-123&#xD;&#xA;//    3) -123-123-123&#xD;&#xA;//&#xD;&#xA;//    Concatenate 4 objects and a variable length parameter list:&#xD;&#xA;//    4) -123-123-123-123&#xD;&#xA;//    5) -123-123-123-123-123&#xD;&#xA;//&#xD;&#xA;//    Concatenate a 3-element object array:&#xD;&#xA;//    6) -123-456-789&#xD;&#xA;&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Runtime.dll&#xD;&#xA;&#xD;&#xA;Concatenates one or more instances of String, or the String representations of the values of one or more instances of Object." Code="int i = -123;&#xD;&#xA;Object o = i;&#xD;&#xA;Object[] objs = new Object[] {-123, -456, -789};&#xD;&#xA;Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);&#xD;&#xA;Console.WriteLine(&quot;1) {0}&quot;, String.Concat(o));&#xD;&#xA;Console.WriteLine(&quot;2) {0}&quot;, String.Concat(o, o));&#xD;&#xA;Console.WriteLine(&quot;3) {0}&quot;, String.Concat(o, o, o));&#xD;&#xA;Console.WriteLine(&quot;\nConcatenate 4 objects and a variable length parameter list:&quot;);&#xD;&#xA;Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o));&#xD;&#xA;Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o));&#xD;&#xA;Console.WriteLine(&quot;\nConcatenate a 3-element object array:&quot;);&#xD;&#xA;Console.WriteLine(&quot;6) {0}&quot;, String.Concat(objs));&#xD;&#xA;&#xD;&#xA;" DisplayName="Invoke Code - Concat()" sap:VirtualizedContainerService.HintSize="388,552" sap2010:WorkflowViewState.IdRef="InvokeCode_17" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
    </Sequence>
    <Sequence DisplayName="Dictionary Sequence" sap:VirtualizedContainerService.HintSize="610,2495" sap2010:WorkflowViewState.IdRef="Sequence_34">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,817" sap2010:WorkflowViewState.IdRef="CommentOut_19">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,738" sap2010:WorkflowViewState.IdRef="Sequence_35">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Gets the value associated with the specified key.&#xD;&#xA;&#xD;&#xA;// When a program often has to try keys that turn out not to&#xD;&#xA;// be in the dictionary, TryGetValue can be a more efficient&#xD;&#xA;// way to retrieve values.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// The indexer throws an exception if the requested key is&#xD;&#xA;// not in the dictionary.&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;For key = \&quot;tif\&quot;, value = {0}.&quot;,&#xD;&#xA;        openWith[&quot;tif&quot;]);&#xD;&#xA;}&#xD;&#xA;catch (KeyNotFoundException)&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;Key = \&quot;tif\&quot; is not found.&quot;);&#xD;&#xA;}" Code="Dictionary&lt;String, String&gt; openWith = new Dictionary&lt;String, String&gt;(); &#xD;&#xA;string value = &quot;&quot;;&#xD;&#xA;if (openWith.TryGetValue(&quot;tif&quot;, out value))&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;For key = \&quot;tif\&quot;, value = {0}.&quot;, value);&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;Key = \&quot;tif\&quot; is not found.&quot;);&#xD;&#xA;}" DisplayName="Invoke Code TryGetValue" sap:VirtualizedContainerService.HintSize="388,627" sap2010:WorkflowViewState.IdRef="InvokeCode_18" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,355" sap2010:WorkflowViewState.IdRef="CommentOut_20">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,276" sap2010:WorkflowViewState.IdRef="Sequence_36">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="     // Create a dictionary of type string, string&#xD;&#xA;        Dictionary&lt;string, string&gt; myDictionary = new Dictionary&lt;string, string&gt;();&#xD;&#xA;&#xD;&#xA;        // Add some key-value pairs&#xD;&#xA;        myDictionary[&quot;Key1&quot;] = &quot;Value1&quot;;&#xD;&#xA;        myDictionary[&quot;Key2&quot;] = &quot;Value2&quot;;&#xD;&#xA;        myDictionary[&quot;Key3&quot;] = &quot;Value3&quot;;&#xD;&#xA;&#xD;&#xA;        // Access values using keys&#xD;&#xA;        string valueForKey2 = myDictionary[&quot;Key2&quot;];&#xD;&#xA;        Console.WriteLine($&quot;The value for Key2 is: {valueForKey2}&quot;);&#xD;&#xA;&#xD;&#xA;        // Iterate through the dictionary&#xD;&#xA;        foreach (var kvp in myDictionary)&#xD;&#xA;        {&#xD;&#xA;            Console.WriteLine($&quot;Key: {kvp.Key}, Value: {kvp.Value}&quot;);&#xD;&#xA;        }" DisplayName="Invoke Code - Key Value Pair In Dictionary" sap:VirtualizedContainerService.HintSize="388,165" sap2010:WorkflowViewState.IdRef="InvokeCode_19" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,355" sap2010:WorkflowViewState.IdRef="CommentOut_21">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,276" sap2010:WorkflowViewState.IdRef="Sequence_37">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="     // Create a dictionary of type string, string&#xD;&#xA;        Dictionary&lt;string, string&gt; myDictionary = new Dictionary&lt;string, string&gt;();&#xD;&#xA;&#xD;&#xA;        // Add some key-value pairs&#xD;&#xA;        myDictionary[&quot;doc&quot;] = &quot;Naren.pdf&quot;;&#xD;&#xA;        myDictionary[&quot;Key2&quot;] = &quot;Value2&quot;;&#xD;&#xA;        myDictionary[&quot;Key3&quot;] = &quot;Value3&quot;;&#xD;&#xA;&#xD;&#xA;        // Access values using keys&#xD;&#xA;        string valueForKey2 = myDictionary[&quot;Key2&quot;];&#xD;&#xA;        Console.WriteLine($&quot;The value for Key2 is: {valueForKey2}&quot;);&#xD;&#xA;&#xD;&#xA;        // Iterate through the dictionary&#xD;&#xA;        foreach (var kvp in myDictionary)&#xD;&#xA;        {&#xD;&#xA;            Console.WriteLine($&quot;Key: {kvp.Key}, Value: {kvp.Value}&quot;);&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;// Use the Remove method to remove a key/value pair.&#xD;&#xA;Console.WriteLine(&quot;\nRemove(\&quot;doc\&quot;)&quot;);&#xD;&#xA;myDictionary.Remove(&quot;doc&quot;);&#xD;&#xA;&#xD;&#xA;if (!myDictionary.ContainsKey(&quot;doc&quot;))&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;Key \&quot;doc\&quot; is not found.&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Console.WriteLine();&#xD;&#xA;Console.WriteLine(&quot;\n After removing the keyvalue pair&quot;);&#xD;&#xA;&#xD;&#xA; foreach (var kvp in myDictionary)&#xD;&#xA;        {&#xD;&#xA;            Console.WriteLine($&quot;Key: {kvp.Key}, Value: {kvp.Value}&quot;);&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;" DisplayName="Invoke Code - Remove()" sap:VirtualizedContainerService.HintSize="388,165" sap2010:WorkflowViewState.IdRef="InvokeCode_20" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="486,532" sap2010:WorkflowViewState.IdRef="CommentOut_22">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="450,453" sap2010:WorkflowViewState.IdRef="Sequence_38">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="&#xD;&#xA;Definition&#xD;&#xA;&#xD;&#xA;Namespace:&#xD;&#xA;System.Collections.Generic&#xD;&#xA;&#xD;&#xA;Assembly:&#xD;&#xA;System.Collections.dll&#xD;&#xA;&#xD;&#xA;Determines whether the Dictionary&lt;TKey,TValue&gt; contains the specified key." Code="Dictionary&lt;string, string&gt; openWith = new Dictionary&lt;string, string&gt;();&#xD;&#xA;// ContainsKey can be used to test keys before inserting&#xD;&#xA;// them.&#xD;&#xA;if (!openWith.ContainsKey(&quot;ht&quot;))&#xD;&#xA;{&#xD;&#xA;    openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);&#xD;&#xA;    Console.WriteLine(&quot;Value added for key = \&quot;ht\&quot;: {0}&quot;,&#xD;&#xA;        openWith[&quot;ht&quot;]);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;foreach(var kvp in openWith)&#xD;&#xA;{&#xD;&#xA;&#x9;Console.WriteLine($&quot;Key: {kvp.Key}, Value: {kvp.Value}&quot;);&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;" DisplayName="Invoke Code - ContainsKey()" sap:VirtualizedContainerService.HintSize="388,342" sap2010:WorkflowViewState.IdRef="InvokeCode_21" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <scg:Dictionary x:TypeArguments="x:String, Argument" />
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
      </ui:CommentOut>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="// Create a new dictionary of strings, with string keys.&#xD;&#xA;Dictionary&lt;string, string&gt; openWith = new Dictionary&lt;string, string&gt;();&#xD;&#xA;&#xD;&#xA;// Add some elements to the dictionary. There are no&#xD;&#xA;// duplicate keys, but some of the values are duplicates.&#xD;&#xA;openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);&#xD;&#xA;openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);&#xD;&#xA;openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);&#xD;&#xA;openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);&#xD;&#xA;&#xD;&#xA;// The Add method throws an exception if the new key is&#xD;&#xA;// already in the dictionary.&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;    openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;);&#xD;&#xA;}&#xD;&#xA;catch (ArgumentException)&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;An element with Key = \&quot;txt\&quot; already exists.&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;foreach (var kvp in openWith)&#xD;&#xA;{&#xD;&#xA;&#x9;Console.WriteLine($&quot;Key: {kvp.Key}, Value: {kvp.Value}&quot;);&#xD;&#xA;}" DisplayName="Invoke Code - Add()" sap:VirtualizedContainerService.HintSize="486,165" sap2010:WorkflowViewState.IdRef="InvokeCode_22" Language="CSharp">
        <ui:InvokeCode.Arguments>
          <scg:Dictionary x:TypeArguments="x:String, Argument" />
        </ui:InvokeCode.Arguments>
      </ui:InvokeCode>
    </Sequence>
  </Sequence>
</Activity>